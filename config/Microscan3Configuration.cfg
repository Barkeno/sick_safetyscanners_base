#!/usr/bin/env python
# MicroScan3 Configuration

PACKAGE='sick_microscan3_ros_driver'

from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.const("sensor_ip", str_t, "192.168.1.10", "Sensor IP Adress, Only set at startup")
gen.const("sensor_tcp_port", str_t, "2122", "Sensor TCP Port Constant",)

gen.add("host_ip", str_t, 1, "IP_v4 adress of the host","192.168.1.9")
gen.add("host_udp_port", int_t, 1, "Port of the host",6060, 2, 65534)

gen.add("laser_scan_frame_name", str_t, 1, "Frame name of the laserscan topic", "laser_scan")

enum_channel = gen.enum([ gen.const("channel_0", int_t, 0, "Channel 0"),
gen.const("channel_1", int_t, 1, "Channel 1"),
gen.const("channel_2", int_t, 2, "Channel 2"),
gen.const("channel_3", int_t, 3, "Channel 3") ], "Select the Channel")

gen.add("channel", int_t, 1, "Select the Channel to modify",0, 0, 3, edit_method = enum_channel)


gen.add("channel_enabled", bool_t, 8, "Enable Channel",True)

enum_eInterface = gen.enum([ gen.const("efi_pro", int_t, 0, "EFI-pro"),
gen.const("ethernet_ip", int_t, 1, "EtherNet/IP"),
gen.const("profinet", int_t, 2, "Profinet"),
gen.const("nonsafe_ethernet", int_t, 3, "Non-safe Ethernet") ], "Select the eInterface")

gen.add("e_interface_type", int_t, 1, "Select the eInterface type",0, 0, 3, edit_method = enum_eInterface)

gen.add("publish_frequency", int_t, 1, "Every n_th scan will be published", 1, 1, 100)

gen.add("angle_start", double_t, 1, "Start angle for sensor in degree, if both start and end angle are 0, all angles are taken in account." ,0,-47.5,227.5)

gen.add("angle_end", double_t, 1, "End angle for sensor in degree, if both start and end angle are 0, all angles are taken in account.", 0,-47.5,227.5)


gen.add("general_system_state", bool_t, 8, "Publish general system state",True)
gen.add("derived_settings", bool_t, 8, "Publish derived settings",True)
gen.add("measurement_data", bool_t, 8, "Publish measurement data",True)
gen.add("intrusion_data", bool_t, 8, "Publish intrusion data",True)
gen.add("application_io_data", bool_t, 8, "Publish application io data",True)



exit(gen.generate(PACKAGE, "dynamic_reconfigure_node", "Microscan3Configuration"))
